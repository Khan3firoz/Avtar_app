{"version":3,"sources":["Avatarlist.js","Avatar.js","reportWebVitals.js","index.js"],"names":["Avatarlist","props","className","src","name","alt","work","Avatar","state","this","setState","avatarlistarray","id","arrayavatarcard","map","avatarcard","i","onClick","namechange","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAUeA,G,YATI,SAACC,GAClB,OACE,sBAAKC,UAAU,wDAAf,UACE,qBAAKC,IAAG,sCAAiCF,EAAMG,MAAQC,IAAI,WAC3D,oBAAIH,UAAU,IAAd,SAAmBD,EAAMG,OACzB,4BAAIH,EAAMK,YCyDDC,E,kDAzDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXJ,KAAM,+BAHI,E,yDAQZK,KAAKC,SAAS,CACZN,KAAM,sC,+BAGA,IAAD,OACDO,EAAkB,CACtB,CACEC,GAAI,EACJR,KAAM,QACNE,KAAM,gBAER,CACEM,GAAI,EACJR,KAAM,WACNE,KAAM,gBAER,CACEM,GAAI,EACJR,KAAM,OACNE,KAAM,SAER,CACEM,GAAI,EACJR,KAAM,WACNE,KAAM,iBAIJO,EAAkBF,EAAgBG,KAAI,SAACC,EAAYC,GACvD,OACE,cAAC,EAAD,CAEEJ,GAAID,EAAgBK,GAAGZ,KACvBE,KAAMK,EAAgBK,GAAGV,KACzBF,KAAMO,EAAgBK,GAAGZ,MAHpBY,MAQX,OACE,sBAAKd,UAAU,WAAf,UACE,6BAAKO,KAAKD,MAAMJ,OACfS,EACD,wBAAQI,QAAS,kBAAM,EAAKC,cAA5B,8B,GApDaC,aCONC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6728a72.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Avatarlist = (props) => {\r\n  return (\r\n    <div className=\"avatarstyle  ma4 bg-light-purple dib pa3 grow shadow4\">\r\n      <img src={`https://joeschmoe.io/api/v1/${props.name}`} alt=\"Avatar\" />\r\n      <h1 className=\" \">{props.name}</h1>\r\n      <p>{props.work}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Avatarlist;\r\n","import React, { Component } from \"react\";\r\nimport \"./Avatar.css\";\r\nimport \"tachyons\";\r\nimport Avatarlist from \"./Avatarlist\";\r\n\r\nclass Avatar extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"Welcome to the Jurassicpark\",\r\n    };\r\n  }\r\n\r\n  namechange() {\r\n    this.setState({\r\n      name: \"Welcome to the New Jurassicpark\",\r\n    });\r\n  }\r\n  render() {\r\n    const avatarlistarray = [\r\n      {\r\n        id: 1,\r\n        name: \"Firoz\",\r\n        work: \"Web devloper\",\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Akhlaque\",\r\n        work: \"Web devloper\",\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Aman\",\r\n        work: \"Cloud\",\r\n      },\r\n      {\r\n        id: 4,\r\n        name: \"Ashfaque\",\r\n        work: \"Data Science\",\r\n      },\r\n    ];\r\n\r\n    const arrayavatarcard = avatarlistarray.map((avatarcard, i) => {\r\n      return (\r\n        <Avatarlist\r\n          key={i}\r\n          id={avatarlistarray[i].name}\r\n          work={avatarlistarray[i].work}\r\n          name={avatarlistarray[i].name}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"mainpage\">\r\n        <h1>{this.state.name}</h1>\r\n        {arrayavatarcard}\r\n        <button onClick={() => this.namechange()}>Subscribe</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Avatar;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport Avatar from \"./Avatar\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Avatar />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}